// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Sat, 05 Mar 2016 20:44:27 MSK.
// By http://git.io/cgogen. DO NOT EDIT.

package vulkan

/*
#include "vulkan.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import "unsafe"

// CreateInstance function as declared in vulkan/vulkan.h:2336
func CreateInstance(PCreateInfo []InstanceCreateInfo, PAllocator []AllocationCallbacks, PInstance [][]Instance) Result {
	cPCreateInfo, _ := unpackArgSInstanceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPInstance, _ := unpackArgSSInstance(PInstance)
	__ret := C.vkCreateInstance(cPCreateInfo, cPAllocator, cPInstance)
	packSSInstance(PInstance, cPInstance)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSInstanceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyInstance function as declared in vulkan/vulkan.h:2341
func DestroyInstance(Instance []Instance, PAllocator []AllocationCallbacks) {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyInstance(cInstance, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// EnumeratePhysicalDevices function as declared in vulkan/vulkan.h:2345
func EnumeratePhysicalDevices(Instance []Instance, PPhysicalDeviceCount []uint32, PPhysicalDevices [][]PhysicalDevice) Result {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cPPhysicalDeviceCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPhysicalDeviceCount)).Data)), cgoAllocsUnknown
	cPPhysicalDevices, _ := unpackArgSSPhysicalDevice(PPhysicalDevices)
	__ret := C.vkEnumeratePhysicalDevices(cInstance, cPPhysicalDeviceCount, cPPhysicalDevices)
	packSSPhysicalDevice(PPhysicalDevices, cPPhysicalDevices)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceFeatures function as declared in vulkan/vulkan.h:2350
func GetPhysicalDeviceFeatures(PhysicalDevice []PhysicalDevice, PFeatures []PhysicalDeviceFeatures) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPFeatures, _ := unpackArgSPhysicalDeviceFeatures(PFeatures)
	C.vkGetPhysicalDeviceFeatures(cPhysicalDevice, cPFeatures)
	packSPhysicalDeviceFeatures(PFeatures, cPFeatures)
}

// GetPhysicalDeviceFormatProperties function as declared in vulkan/vulkan.h:2354
func GetPhysicalDeviceFormatProperties(PhysicalDevice []PhysicalDevice, Format Format, PFormatProperties []FormatProperties) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	cPFormatProperties, _ := unpackArgSFormatProperties(PFormatProperties)
	C.vkGetPhysicalDeviceFormatProperties(cPhysicalDevice, cFormat, cPFormatProperties)
	packSFormatProperties(PFormatProperties, cPFormatProperties)
}

// GetPhysicalDeviceImageFormatProperties function as declared in vulkan/vulkan.h:2359
func GetPhysicalDeviceImageFormatProperties(PhysicalDevice []PhysicalDevice, Format Format, _type ImageType, Tiling ImageTiling, Usage ImageUsageFlags, Flags ImageCreateFlags, PImageFormatProperties []ImageFormatProperties) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	c_type, _ := (C.VkImageType)(_type), cgoAllocsUnknown
	cTiling, _ := (C.VkImageTiling)(Tiling), cgoAllocsUnknown
	cUsage, _ := (C.VkImageUsageFlags)(Usage), cgoAllocsUnknown
	cFlags, _ := (C.VkImageCreateFlags)(Flags), cgoAllocsUnknown
	cPImageFormatProperties, _ := unpackArgSImageFormatProperties(PImageFormatProperties)
	__ret := C.vkGetPhysicalDeviceImageFormatProperties(cPhysicalDevice, cFormat, c_type, cTiling, cUsage, cFlags, cPImageFormatProperties)
	packSImageFormatProperties(PImageFormatProperties, cPImageFormatProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceProperties function as declared in vulkan/vulkan.h:2368
func GetPhysicalDeviceProperties(PhysicalDevice []PhysicalDevice, PProperties []PhysicalDeviceProperties) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSPhysicalDeviceProperties(PProperties)
	C.vkGetPhysicalDeviceProperties(cPhysicalDevice, cPProperties)
	packSPhysicalDeviceProperties(PProperties, cPProperties)
}

// GetPhysicalDeviceQueueFamilyProperties function as declared in vulkan/vulkan.h:2372
func GetPhysicalDeviceQueueFamilyProperties(PhysicalDevice []PhysicalDevice, PQueueFamilyPropertyCount []uint32, PQueueFamilyProperties []QueueFamilyProperties) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPQueueFamilyPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PQueueFamilyPropertyCount)).Data)), cgoAllocsUnknown
	cPQueueFamilyProperties, _ := unpackArgSQueueFamilyProperties(PQueueFamilyProperties)
	C.vkGetPhysicalDeviceQueueFamilyProperties(cPhysicalDevice, cPQueueFamilyPropertyCount, cPQueueFamilyProperties)
	packSQueueFamilyProperties(PQueueFamilyProperties, cPQueueFamilyProperties)
}

// GetPhysicalDeviceMemoryProperties function as declared in vulkan/vulkan.h:2377
func GetPhysicalDeviceMemoryProperties(PhysicalDevice []PhysicalDevice, PMemoryProperties []PhysicalDeviceMemoryProperties) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPMemoryProperties, _ := unpackArgSPhysicalDeviceMemoryProperties(PMemoryProperties)
	C.vkGetPhysicalDeviceMemoryProperties(cPhysicalDevice, cPMemoryProperties)
	packSPhysicalDeviceMemoryProperties(PMemoryProperties, cPMemoryProperties)
}

// CreateDevice function as declared in vulkan/vulkan.h:2389
func CreateDevice(PhysicalDevice []PhysicalDevice, PCreateInfo []DeviceCreateInfo, PAllocator []AllocationCallbacks, PDevice [][]Device) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDeviceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDevice, _ := unpackArgSSDevice(PDevice)
	__ret := C.vkCreateDevice(cPhysicalDevice, cPCreateInfo, cPAllocator, cPDevice)
	packSSDevice(PDevice, cPDevice)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDeviceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDevice function as declared in vulkan/vulkan.h:2395
func DestroyDevice(Device []Device, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDevice(cDevice, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// EnumerateInstanceExtensionProperties function as declared in vulkan/vulkan.h:2399
func EnumerateInstanceExtensionProperties(PLayerName string, PPropertyCount []uint32, PProperties []ExtensionProperties) Result {
	cPLayerName, _ := unpackPCharString(PLayerName)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSExtensionProperties(PProperties)
	__ret := C.vkEnumerateInstanceExtensionProperties(cPLayerName, cPPropertyCount, cPProperties)
	packSExtensionProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceExtensionProperties function as declared in vulkan/vulkan.h:2404
func EnumerateDeviceExtensionProperties(PhysicalDevice []PhysicalDevice, PLayerName string, PPropertyCount []uint32, PProperties []ExtensionProperties) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPLayerName, _ := unpackPCharString(PLayerName)
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSExtensionProperties(PProperties)
	__ret := C.vkEnumerateDeviceExtensionProperties(cPhysicalDevice, cPLayerName, cPPropertyCount, cPProperties)
	packSExtensionProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateInstanceLayerProperties function as declared in vulkan/vulkan.h:2410
func EnumerateInstanceLayerProperties(PPropertyCount []uint32, PProperties []LayerProperties) Result {
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSLayerProperties(PProperties)
	__ret := C.vkEnumerateInstanceLayerProperties(cPPropertyCount, cPProperties)
	packSLayerProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// EnumerateDeviceLayerProperties function as declared in vulkan/vulkan.h:2414
func EnumerateDeviceLayerProperties(PhysicalDevice []PhysicalDevice, PPropertyCount []uint32, PProperties []LayerProperties) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSLayerProperties(PProperties)
	__ret := C.vkEnumerateDeviceLayerProperties(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSLayerProperties(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceQueue function as declared in vulkan/vulkan.h:2419
func GetDeviceQueue(Device []Device, QueueFamilyIndex uint32, QueueIndex uint32, PQueue [][]Queue) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cQueueFamilyIndex, _ := (C.uint32_t)(QueueFamilyIndex), cgoAllocsUnknown
	cQueueIndex, _ := (C.uint32_t)(QueueIndex), cgoAllocsUnknown
	cPQueue, _ := unpackArgSSQueue(PQueue)
	C.vkGetDeviceQueue(cDevice, cQueueFamilyIndex, cQueueIndex, cPQueue)
	packSSQueue(PQueue, cPQueue)
}

// QueueSubmit function as declared in vulkan/vulkan.h:2425
func QueueSubmit(Queue []Queue, SubmitCount uint32, PSubmits []SubmitInfo, Fence []Fence) Result {
	cQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Queue)).Data)), cgoAllocsUnknown
	cSubmitCount, _ := (C.uint32_t)(SubmitCount), cgoAllocsUnknown
	cPSubmits, _ := unpackArgSSubmitInfo(PSubmits)
	cFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Fence)).Data)), cgoAllocsUnknown
	__ret := C.vkQueueSubmit(cQueue, cSubmitCount, cPSubmits, cFence)
	packSSubmitInfo(PSubmits, cPSubmits)
	__v := (Result)(__ret)
	return __v
}

// QueueWaitIdle function as declared in vulkan/vulkan.h:2431
func QueueWaitIdle(Queue []Queue) Result {
	cQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Queue)).Data)), cgoAllocsUnknown
	__ret := C.vkQueueWaitIdle(cQueue)
	__v := (Result)(__ret)
	return __v
}

// DeviceWaitIdle function as declared in vulkan/vulkan.h:2434
func DeviceWaitIdle(Device []Device) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	__ret := C.vkDeviceWaitIdle(cDevice)
	__v := (Result)(__ret)
	return __v
}

// AllocateMemory function as declared in vulkan/vulkan.h:2437
func AllocateMemory(Device []Device, PAllocateInfo []MemoryAllocateInfo, PAllocator []AllocationCallbacks, PMemory [][]DeviceMemory) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSMemoryAllocateInfo(PAllocateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPMemory, _ := unpackArgSSDeviceMemory(PMemory)
	__ret := C.vkAllocateMemory(cDevice, cPAllocateInfo, cPAllocator, cPMemory)
	packSSDeviceMemory(PMemory, cPMemory)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSMemoryAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeMemory function as declared in vulkan/vulkan.h:2443
func FreeMemory(Device []Device, Memory []DeviceMemory, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkFreeMemory(cDevice, cMemory, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// MapMemory function as declared in vulkan/vulkan.h:2448
func MapMemory(Device []Device, Memory []DeviceMemory, Offset DeviceSize, Size DeviceSize, Flags MemoryMapFlags, PpData []unsafe.Pointer) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cSize, _ := (C.VkDeviceSize)(Size), cgoAllocsUnknown
	cFlags, _ := (C.VkMemoryMapFlags)(Flags), cgoAllocsUnknown
	cPpData, _ := (*unsafe.Pointer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PpData)).Data)), cgoAllocsUnknown
	__ret := C.vkMapMemory(cDevice, cMemory, cOffset, cSize, cFlags, cPpData)
	__v := (Result)(__ret)
	return __v
}

// UnmapMemory function as declared in vulkan/vulkan.h:2456
func UnmapMemory(Device []Device, Memory []DeviceMemory) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	C.vkUnmapMemory(cDevice, cMemory)
}

// FlushMappedMemoryRanges function as declared in vulkan/vulkan.h:2460
func FlushMappedMemoryRanges(Device []Device, MemoryRangeCount uint32, PMemoryRanges []MappedMemoryRange) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemoryRangeCount, _ := (C.uint32_t)(MemoryRangeCount), cgoAllocsUnknown
	cPMemoryRanges, _ := unpackArgSMappedMemoryRange(PMemoryRanges)
	__ret := C.vkFlushMappedMemoryRanges(cDevice, cMemoryRangeCount, cPMemoryRanges)
	packSMappedMemoryRange(PMemoryRanges, cPMemoryRanges)
	__v := (Result)(__ret)
	return __v
}

// InvalidateMappedMemoryRanges function as declared in vulkan/vulkan.h:2465
func InvalidateMappedMemoryRanges(Device []Device, MemoryRangeCount uint32, PMemoryRanges []MappedMemoryRange) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemoryRangeCount, _ := (C.uint32_t)(MemoryRangeCount), cgoAllocsUnknown
	cPMemoryRanges, _ := unpackArgSMappedMemoryRange(PMemoryRanges)
	__ret := C.vkInvalidateMappedMemoryRanges(cDevice, cMemoryRangeCount, cPMemoryRanges)
	packSMappedMemoryRange(PMemoryRanges, cPMemoryRanges)
	__v := (Result)(__ret)
	return __v
}

// GetDeviceMemoryCommitment function as declared in vulkan/vulkan.h:2470
func GetDeviceMemoryCommitment(Device []Device, Memory []DeviceMemory, PCommittedMemoryInBytes []DeviceSize) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	cPCommittedMemoryInBytes, _ := (*C.VkDeviceSize)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PCommittedMemoryInBytes)).Data)), cgoAllocsUnknown
	C.vkGetDeviceMemoryCommitment(cDevice, cMemory, cPCommittedMemoryInBytes)
}

// BindBufferMemory function as declared in vulkan/vulkan.h:2475
func BindBufferMemory(Device []Device, Buffer []Buffer, Memory []DeviceMemory, MemoryOffset DeviceSize) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	cMemoryOffset, _ := (C.VkDeviceSize)(MemoryOffset), cgoAllocsUnknown
	__ret := C.vkBindBufferMemory(cDevice, cBuffer, cMemory, cMemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// BindImageMemory function as declared in vulkan/vulkan.h:2481
func BindImageMemory(Device []Device, Image []Image, Memory []DeviceMemory, MemoryOffset DeviceSize) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cMemory, _ := (*C.VkDeviceMemory)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Memory)).Data)), cgoAllocsUnknown
	cMemoryOffset, _ := (C.VkDeviceSize)(MemoryOffset), cgoAllocsUnknown
	__ret := C.vkBindImageMemory(cDevice, cImage, cMemory, cMemoryOffset)
	__v := (Result)(__ret)
	return __v
}

// GetBufferMemoryRequirements function as declared in vulkan/vulkan.h:2487
func GetBufferMemoryRequirements(Device []Device, Buffer []Buffer, PMemoryRequirements []MemoryRequirements) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements(PMemoryRequirements)
	C.vkGetBufferMemoryRequirements(cDevice, cBuffer, cPMemoryRequirements)
	packSMemoryRequirements(PMemoryRequirements, cPMemoryRequirements)
}

// GetImageMemoryRequirements function as declared in vulkan/vulkan.h:2492
func GetImageMemoryRequirements(Device []Device, Image []Image, PMemoryRequirements []MemoryRequirements) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cPMemoryRequirements, _ := unpackArgSMemoryRequirements(PMemoryRequirements)
	C.vkGetImageMemoryRequirements(cDevice, cImage, cPMemoryRequirements)
	packSMemoryRequirements(PMemoryRequirements, cPMemoryRequirements)
}

// GetImageSparseMemoryRequirements function as declared in vulkan/vulkan.h:2497
func GetImageSparseMemoryRequirements(Device []Device, Image []Image, PSparseMemoryRequirementCount []uint32, PSparseMemoryRequirements []SparseImageMemoryRequirements) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cPSparseMemoryRequirementCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSparseMemoryRequirementCount)).Data)), cgoAllocsUnknown
	cPSparseMemoryRequirements, _ := unpackArgSSparseImageMemoryRequirements(PSparseMemoryRequirements)
	C.vkGetImageSparseMemoryRequirements(cDevice, cImage, cPSparseMemoryRequirementCount, cPSparseMemoryRequirements)
	packSSparseImageMemoryRequirements(PSparseMemoryRequirements, cPSparseMemoryRequirements)
}

// GetPhysicalDeviceSparseImageFormatProperties function as declared in vulkan/vulkan.h:2503
func GetPhysicalDeviceSparseImageFormatProperties(PhysicalDevice []PhysicalDevice, Format Format, _type ImageType, Samples SampleCountFlagBits, Usage ImageUsageFlags, Tiling ImageTiling, PPropertyCount []uint32, PProperties []SparseImageFormatProperties) {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cFormat, _ := (C.VkFormat)(Format), cgoAllocsUnknown
	c_type, _ := (C.VkImageType)(_type), cgoAllocsUnknown
	cSamples, _ := (C.VkSampleCountFlagBits)(Samples), cgoAllocsUnknown
	cUsage, _ := (C.VkImageUsageFlags)(Usage), cgoAllocsUnknown
	cTiling, _ := (C.VkImageTiling)(Tiling), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSSparseImageFormatProperties(PProperties)
	C.vkGetPhysicalDeviceSparseImageFormatProperties(cPhysicalDevice, cFormat, c_type, cSamples, cUsage, cTiling, cPPropertyCount, cPProperties)
	packSSparseImageFormatProperties(PProperties, cPProperties)
}

// QueueBindSparse function as declared in vulkan/vulkan.h:2513
func QueueBindSparse(Queue []Queue, BindInfoCount uint32, PBindInfo []BindSparseInfo, Fence []Fence) Result {
	cQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Queue)).Data)), cgoAllocsUnknown
	cBindInfoCount, _ := (C.uint32_t)(BindInfoCount), cgoAllocsUnknown
	cPBindInfo, _ := unpackArgSBindSparseInfo(PBindInfo)
	cFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Fence)).Data)), cgoAllocsUnknown
	__ret := C.vkQueueBindSparse(cQueue, cBindInfoCount, cPBindInfo, cFence)
	packSBindSparseInfo(PBindInfo, cPBindInfo)
	__v := (Result)(__ret)
	return __v
}

// CreateFence function as declared in vulkan/vulkan.h:2519
func CreateFence(Device []Device, PCreateInfo []FenceCreateInfo, PAllocator []AllocationCallbacks, PFence [][]Fence) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSFenceCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFence, _ := unpackArgSSFence(PFence)
	__ret := C.vkCreateFence(cDevice, cPCreateInfo, cPAllocator, cPFence)
	packSSFence(PFence, cPFence)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSFenceCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyFence function as declared in vulkan/vulkan.h:2525
func DestroyFence(Device []Device, Fence []Fence, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Fence)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyFence(cDevice, cFence, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetFences function as declared in vulkan/vulkan.h:2530
func ResetFences(Device []Device, FenceCount uint32, PFences [][]Fence) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cFenceCount, _ := (C.uint32_t)(FenceCount), cgoAllocsUnknown
	cPFences, _ := unpackArgSSFence(PFences)
	__ret := C.vkResetFences(cDevice, cFenceCount, cPFences)
	packSSFence(PFences, cPFences)
	__v := (Result)(__ret)
	return __v
}

// GetFenceStatus function as declared in vulkan/vulkan.h:2535
func GetFenceStatus(Device []Device, Fence []Fence) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Fence)).Data)), cgoAllocsUnknown
	__ret := C.vkGetFenceStatus(cDevice, cFence)
	__v := (Result)(__ret)
	return __v
}

// WaitForFences function as declared in vulkan/vulkan.h:2539
func WaitForFences(Device []Device, FenceCount uint32, PFences [][]Fence, WaitAll Bool32, Timeout uint64) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cFenceCount, _ := (C.uint32_t)(FenceCount), cgoAllocsUnknown
	cPFences, _ := unpackArgSSFence(PFences)
	cWaitAll, _ := (C.VkBool32)(WaitAll), cgoAllocsUnknown
	cTimeout, _ := (C.uint64_t)(Timeout), cgoAllocsUnknown
	__ret := C.vkWaitForFences(cDevice, cFenceCount, cPFences, cWaitAll, cTimeout)
	packSSFence(PFences, cPFences)
	__v := (Result)(__ret)
	return __v
}

// CreateSemaphore function as declared in vulkan/vulkan.h:2546
func CreateSemaphore(Device []Device, PCreateInfo []SemaphoreCreateInfo, PAllocator []AllocationCallbacks, PSemaphore [][]Semaphore) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSemaphoreCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSemaphore, _ := unpackArgSSSemaphore(PSemaphore)
	__ret := C.vkCreateSemaphore(cDevice, cPCreateInfo, cPAllocator, cPSemaphore)
	packSSSemaphore(PSemaphore, cPSemaphore)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSemaphoreCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySemaphore function as declared in vulkan/vulkan.h:2552
func DestroySemaphore(Device []Device, Semaphore []Semaphore, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSemaphore, _ := (*C.VkSemaphore)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Semaphore)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySemaphore(cDevice, cSemaphore, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateEvent function as declared in vulkan/vulkan.h:2557
func CreateEvent(Device []Device, PCreateInfo []EventCreateInfo, PAllocator []AllocationCallbacks, PEvent [][]Event) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSEventCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPEvent, _ := unpackArgSSEvent(PEvent)
	__ret := C.vkCreateEvent(cDevice, cPCreateInfo, cPAllocator, cPEvent)
	packSSEvent(PEvent, cPEvent)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSEventCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyEvent function as declared in vulkan/vulkan.h:2563
func DestroyEvent(Device []Device, Event []Event, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyEvent(cDevice, cEvent, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetEventStatus function as declared in vulkan/vulkan.h:2568
func GetEventStatus(Device []Device, Event []Event) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	__ret := C.vkGetEventStatus(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// SetEvent function as declared in vulkan/vulkan.h:2572
func SetEvent(Device []Device, Event []Event) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	__ret := C.vkSetEvent(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// ResetEvent function as declared in vulkan/vulkan.h:2576
func ResetEvent(Device []Device, Event []Event) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	__ret := C.vkResetEvent(cDevice, cEvent)
	__v := (Result)(__ret)
	return __v
}

// CreateQueryPool function as declared in vulkan/vulkan.h:2580
func CreateQueryPool(Device []Device, PCreateInfo []QueryPoolCreateInfo, PAllocator []AllocationCallbacks, PQueryPool [][]QueryPool) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSQueryPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPQueryPool, _ := unpackArgSSQueryPool(PQueryPool)
	__ret := C.vkCreateQueryPool(cDevice, cPCreateInfo, cPAllocator, cPQueryPool)
	packSSQueryPool(PQueryPool, cPQueryPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSQueryPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyQueryPool function as declared in vulkan/vulkan.h:2586
func DestroyQueryPool(Device []Device, QueryPool []QueryPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyQueryPool(cDevice, cQueryPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetQueryPoolResults function as declared in vulkan/vulkan.h:2591
func GetQueryPoolResults(Device []Device, QueryPool []QueryPool, FirstQuery uint32, QueryCount uint32, DataSize uint, PData unsafe.Pointer, Stride DeviceSize, Flags QueryResultFlags) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	cDataSize, _ := (C.size_t)(DataSize), cgoAllocsUnknown
	cPData, _ := (unsafe.Pointer)(unsafe.Pointer(PData)), cgoAllocsUnknown
	cStride, _ := (C.VkDeviceSize)(Stride), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryResultFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkGetQueryPoolResults(cDevice, cQueryPool, cFirstQuery, cQueryCount, cDataSize, cPData, cStride, cFlags)
	__v := (Result)(__ret)
	return __v
}

// CreateBuffer function as declared in vulkan/vulkan.h:2601
func CreateBuffer(Device []Device, PCreateInfo []BufferCreateInfo, PAllocator []AllocationCallbacks, PBuffer [][]Buffer) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSBufferCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPBuffer, _ := unpackArgSSBuffer(PBuffer)
	__ret := C.vkCreateBuffer(cDevice, cPCreateInfo, cPAllocator, cPBuffer)
	packSSBuffer(PBuffer, cPBuffer)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSBufferCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyBuffer function as declared in vulkan/vulkan.h:2607
func DestroyBuffer(Device []Device, Buffer []Buffer, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyBuffer(cDevice, cBuffer, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateBufferView function as declared in vulkan/vulkan.h:2612
func CreateBufferView(Device []Device, PCreateInfo []BufferViewCreateInfo, PAllocator []AllocationCallbacks, PView [][]BufferView) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSBufferViewCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPView, _ := unpackArgSSBufferView(PView)
	__ret := C.vkCreateBufferView(cDevice, cPCreateInfo, cPAllocator, cPView)
	packSSBufferView(PView, cPView)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSBufferViewCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyBufferView function as declared in vulkan/vulkan.h:2618
func DestroyBufferView(Device []Device, BufferView []BufferView, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cBufferView, _ := (*C.VkBufferView)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&BufferView)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyBufferView(cDevice, cBufferView, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateImage function as declared in vulkan/vulkan.h:2623
func CreateImage(Device []Device, PCreateInfo []ImageCreateInfo, PAllocator []AllocationCallbacks, PImage [][]Image) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSImageCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPImage, _ := unpackArgSSImage(PImage)
	__ret := C.vkCreateImage(cDevice, cPCreateInfo, cPAllocator, cPImage)
	packSSImage(PImage, cPImage)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSImageCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyImage function as declared in vulkan/vulkan.h:2629
func DestroyImage(Device []Device, Image []Image, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyImage(cDevice, cImage, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetImageSubresourceLayout function as declared in vulkan/vulkan.h:2634
func GetImageSubresourceLayout(Device []Device, Image []Image, PSubresource []ImageSubresource, PLayout []SubresourceLayout) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cPSubresource, _ := unpackArgSImageSubresource(PSubresource)
	cPLayout, _ := unpackArgSSubresourceLayout(PLayout)
	C.vkGetImageSubresourceLayout(cDevice, cImage, cPSubresource, cPLayout)
	packSSubresourceLayout(PLayout, cPLayout)
	packSImageSubresource(PSubresource, cPSubresource)
}

// CreateImageView function as declared in vulkan/vulkan.h:2640
func CreateImageView(Device []Device, PCreateInfo []ImageViewCreateInfo, PAllocator []AllocationCallbacks, PView [][]ImageView) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSImageViewCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPView, _ := unpackArgSSImageView(PView)
	__ret := C.vkCreateImageView(cDevice, cPCreateInfo, cPAllocator, cPView)
	packSSImageView(PView, cPView)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSImageViewCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyImageView function as declared in vulkan/vulkan.h:2646
func DestroyImageView(Device []Device, ImageView []ImageView, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cImageView, _ := (*C.VkImageView)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ImageView)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyImageView(cDevice, cImageView, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateShaderModule function as declared in vulkan/vulkan.h:2651
func CreateShaderModule(Device []Device, PCreateInfo []ShaderModuleCreateInfo, PAllocator []AllocationCallbacks, PShaderModule [][]ShaderModule) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSShaderModuleCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPShaderModule, _ := unpackArgSSShaderModule(PShaderModule)
	__ret := C.vkCreateShaderModule(cDevice, cPCreateInfo, cPAllocator, cPShaderModule)
	packSSShaderModule(PShaderModule, cPShaderModule)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSShaderModuleCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyShaderModule function as declared in vulkan/vulkan.h:2657
func DestroyShaderModule(Device []Device, ShaderModule []ShaderModule, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cShaderModule, _ := (*C.VkShaderModule)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ShaderModule)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyShaderModule(cDevice, cShaderModule, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreatePipelineCache function as declared in vulkan/vulkan.h:2662
func CreatePipelineCache(Device []Device, PCreateInfo []PipelineCacheCreateInfo, PAllocator []AllocationCallbacks, PPipelineCache [][]PipelineCache) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSPipelineCacheCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelineCache, _ := unpackArgSSPipelineCache(PPipelineCache)
	__ret := C.vkCreatePipelineCache(cDevice, cPCreateInfo, cPAllocator, cPPipelineCache)
	packSSPipelineCache(PPipelineCache, cPPipelineCache)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSPipelineCacheCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineCache function as declared in vulkan/vulkan.h:2668
func DestroyPipelineCache(Device []Device, PipelineCache []PipelineCache, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipelineCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PipelineCache)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipelineCache(cDevice, cPipelineCache, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetPipelineCacheData function as declared in vulkan/vulkan.h:2673
func GetPipelineCacheData(Device []Device, PipelineCache []PipelineCache, PDataSize []uint, PData unsafe.Pointer) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipelineCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PipelineCache)).Data)), cgoAllocsUnknown
	cPDataSize, _ := (*C.size_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDataSize)).Data)), cgoAllocsUnknown
	cPData, _ := (unsafe.Pointer)(unsafe.Pointer(PData)), cgoAllocsUnknown
	__ret := C.vkGetPipelineCacheData(cDevice, cPipelineCache, cPDataSize, cPData)
	__v := (Result)(__ret)
	return __v
}

// MergePipelineCaches function as declared in vulkan/vulkan.h:2679
func MergePipelineCaches(Device []Device, DstCache []PipelineCache, SrcCacheCount uint32, PSrcCaches [][]PipelineCache) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDstCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstCache)).Data)), cgoAllocsUnknown
	cSrcCacheCount, _ := (C.uint32_t)(SrcCacheCount), cgoAllocsUnknown
	cPSrcCaches, _ := unpackArgSSPipelineCache(PSrcCaches)
	__ret := C.vkMergePipelineCaches(cDevice, cDstCache, cSrcCacheCount, cPSrcCaches)
	packSSPipelineCache(PSrcCaches, cPSrcCaches)
	__v := (Result)(__ret)
	return __v
}

// CreateGraphicsPipelines function as declared in vulkan/vulkan.h:2685
func CreateGraphicsPipelines(Device []Device, PipelineCache []PipelineCache, CreateInfoCount uint32, PCreateInfos []GraphicsPipelineCreateInfo, PAllocator []AllocationCallbacks, PPipelines [][]Pipeline) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipelineCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PipelineCache)).Data)), cgoAllocsUnknown
	cCreateInfoCount, _ := (C.uint32_t)(CreateInfoCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSGraphicsPipelineCreateInfo(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelines, _ := unpackArgSSPipeline(PPipelines)
	__ret := C.vkCreateGraphicsPipelines(cDevice, cPipelineCache, cCreateInfoCount, cPCreateInfos, cPAllocator, cPPipelines)
	packSSPipeline(PPipelines, cPPipelines)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSGraphicsPipelineCreateInfo(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// CreateComputePipelines function as declared in vulkan/vulkan.h:2693
func CreateComputePipelines(Device []Device, PipelineCache []PipelineCache, CreateInfoCount uint32, PCreateInfos []ComputePipelineCreateInfo, PAllocator []AllocationCallbacks, PPipelines [][]Pipeline) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipelineCache, _ := (*C.VkPipelineCache)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PipelineCache)).Data)), cgoAllocsUnknown
	cCreateInfoCount, _ := (C.uint32_t)(CreateInfoCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSComputePipelineCreateInfo(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelines, _ := unpackArgSSPipeline(PPipelines)
	__ret := C.vkCreateComputePipelines(cDevice, cPipelineCache, cCreateInfoCount, cPCreateInfos, cPAllocator, cPPipelines)
	packSSPipeline(PPipelines, cPPipelines)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSComputePipelineCreateInfo(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipeline function as declared in vulkan/vulkan.h:2701
func DestroyPipeline(Device []Device, Pipeline []Pipeline, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipeline, _ := (*C.VkPipeline)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Pipeline)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipeline(cDevice, cPipeline, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreatePipelineLayout function as declared in vulkan/vulkan.h:2706
func CreatePipelineLayout(Device []Device, PCreateInfo []PipelineLayoutCreateInfo, PAllocator []AllocationCallbacks, PPipelineLayout [][]PipelineLayout) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSPipelineLayoutCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPPipelineLayout, _ := unpackArgSSPipelineLayout(PPipelineLayout)
	__ret := C.vkCreatePipelineLayout(cDevice, cPCreateInfo, cPAllocator, cPPipelineLayout)
	packSSPipelineLayout(PPipelineLayout, cPPipelineLayout)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSPipelineLayoutCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyPipelineLayout function as declared in vulkan/vulkan.h:2712
func DestroyPipelineLayout(Device []Device, PipelineLayout []PipelineLayout, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPipelineLayout, _ := (*C.VkPipelineLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PipelineLayout)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyPipelineLayout(cDevice, cPipelineLayout, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateSampler function as declared in vulkan/vulkan.h:2717
func CreateSampler(Device []Device, PCreateInfo []SamplerCreateInfo, PAllocator []AllocationCallbacks, PSampler [][]Sampler) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSamplerCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSampler, _ := unpackArgSSSampler(PSampler)
	__ret := C.vkCreateSampler(cDevice, cPCreateInfo, cPAllocator, cPSampler)
	packSSSampler(PSampler, cPSampler)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSamplerCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySampler function as declared in vulkan/vulkan.h:2723
func DestroySampler(Device []Device, Sampler []Sampler, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSampler, _ := (*C.VkSampler)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Sampler)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySampler(cDevice, cSampler, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateDescriptorSetLayout function as declared in vulkan/vulkan.h:2728
func CreateDescriptorSetLayout(Device []Device, PCreateInfo []DescriptorSetLayoutCreateInfo, PAllocator []AllocationCallbacks, PSetLayout [][]DescriptorSetLayout) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorSetLayoutCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSetLayout, _ := unpackArgSSDescriptorSetLayout(PSetLayout)
	__ret := C.vkCreateDescriptorSetLayout(cDevice, cPCreateInfo, cPAllocator, cPSetLayout)
	packSSDescriptorSetLayout(PSetLayout, cPSetLayout)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorSetLayoutCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorSetLayout function as declared in vulkan/vulkan.h:2734
func DestroyDescriptorSetLayout(Device []Device, DescriptorSetLayout []DescriptorSetLayout, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDescriptorSetLayout, _ := (*C.VkDescriptorSetLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DescriptorSetLayout)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorSetLayout(cDevice, cDescriptorSetLayout, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateDescriptorPool function as declared in vulkan/vulkan.h:2739
func CreateDescriptorPool(Device []Device, PCreateInfo []DescriptorPoolCreateInfo, PAllocator []AllocationCallbacks, PDescriptorPool [][]DescriptorPool) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDescriptorPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPDescriptorPool, _ := unpackArgSSDescriptorPool(PDescriptorPool)
	__ret := C.vkCreateDescriptorPool(cDevice, cPCreateInfo, cPAllocator, cPDescriptorPool)
	packSSDescriptorPool(PDescriptorPool, cPDescriptorPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDescriptorPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDescriptorPool function as declared in vulkan/vulkan.h:2745
func DestroyDescriptorPool(Device []Device, DescriptorPool []DescriptorPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDescriptorPool, _ := (*C.VkDescriptorPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DescriptorPool)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDescriptorPool(cDevice, cDescriptorPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetDescriptorPool function as declared in vulkan/vulkan.h:2750
func ResetDescriptorPool(Device []Device, DescriptorPool []DescriptorPool, Flags DescriptorPoolResetFlags) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDescriptorPool, _ := (*C.VkDescriptorPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DescriptorPool)).Data)), cgoAllocsUnknown
	cFlags, _ := (C.VkDescriptorPoolResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetDescriptorPool(cDevice, cDescriptorPool, cFlags)
	__v := (Result)(__ret)
	return __v
}

// AllocateDescriptorSets function as declared in vulkan/vulkan.h:2755
func AllocateDescriptorSets(Device []Device, PAllocateInfo []DescriptorSetAllocateInfo, PDescriptorSets [][]DescriptorSet) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSDescriptorSetAllocateInfo(PAllocateInfo)
	cPDescriptorSets, _ := unpackArgSSDescriptorSet(PDescriptorSets)
	__ret := C.vkAllocateDescriptorSets(cDevice, cPAllocateInfo, cPDescriptorSets)
	packSSDescriptorSet(PDescriptorSets, cPDescriptorSets)
	packSDescriptorSetAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeDescriptorSets function as declared in vulkan/vulkan.h:2760
func FreeDescriptorSets(Device []Device, DescriptorPool []DescriptorPool, DescriptorSetCount uint32, PDescriptorSets [][]DescriptorSet) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDescriptorPool, _ := (*C.VkDescriptorPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DescriptorPool)).Data)), cgoAllocsUnknown
	cDescriptorSetCount, _ := (C.uint32_t)(DescriptorSetCount), cgoAllocsUnknown
	cPDescriptorSets, _ := unpackArgSSDescriptorSet(PDescriptorSets)
	__ret := C.vkFreeDescriptorSets(cDevice, cDescriptorPool, cDescriptorSetCount, cPDescriptorSets)
	packSSDescriptorSet(PDescriptorSets, cPDescriptorSets)
	__v := (Result)(__ret)
	return __v
}

// UpdateDescriptorSets function as declared in vulkan/vulkan.h:2766
func UpdateDescriptorSets(Device []Device, DescriptorWriteCount uint32, PDescriptorWrites []WriteDescriptorSet, DescriptorCopyCount uint32, PDescriptorCopies []CopyDescriptorSet) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cDescriptorWriteCount, _ := (C.uint32_t)(DescriptorWriteCount), cgoAllocsUnknown
	cPDescriptorWrites, _ := unpackArgSWriteDescriptorSet(PDescriptorWrites)
	cDescriptorCopyCount, _ := (C.uint32_t)(DescriptorCopyCount), cgoAllocsUnknown
	cPDescriptorCopies, _ := unpackArgSCopyDescriptorSet(PDescriptorCopies)
	C.vkUpdateDescriptorSets(cDevice, cDescriptorWriteCount, cPDescriptorWrites, cDescriptorCopyCount, cPDescriptorCopies)
	packSCopyDescriptorSet(PDescriptorCopies, cPDescriptorCopies)
	packSWriteDescriptorSet(PDescriptorWrites, cPDescriptorWrites)
}

// CreateFramebuffer function as declared in vulkan/vulkan.h:2773
func CreateFramebuffer(Device []Device, PCreateInfo []FramebufferCreateInfo, PAllocator []AllocationCallbacks, PFramebuffer [][]Framebuffer) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSFramebufferCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPFramebuffer, _ := unpackArgSSFramebuffer(PFramebuffer)
	__ret := C.vkCreateFramebuffer(cDevice, cPCreateInfo, cPAllocator, cPFramebuffer)
	packSSFramebuffer(PFramebuffer, cPFramebuffer)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSFramebufferCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyFramebuffer function as declared in vulkan/vulkan.h:2779
func DestroyFramebuffer(Device []Device, Framebuffer []Framebuffer, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cFramebuffer, _ := (*C.VkFramebuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Framebuffer)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyFramebuffer(cDevice, cFramebuffer, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// CreateRenderPass function as declared in vulkan/vulkan.h:2784
func CreateRenderPass(Device []Device, PCreateInfo []RenderPassCreateInfo, PAllocator []AllocationCallbacks, PRenderPass [][]RenderPass) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSRenderPassCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPRenderPass, _ := unpackArgSSRenderPass(PRenderPass)
	__ret := C.vkCreateRenderPass(cDevice, cPCreateInfo, cPAllocator, cPRenderPass)
	packSSRenderPass(PRenderPass, cPRenderPass)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSRenderPassCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyRenderPass function as declared in vulkan/vulkan.h:2790
func DestroyRenderPass(Device []Device, RenderPass []RenderPass, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cRenderPass, _ := (*C.VkRenderPass)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&RenderPass)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyRenderPass(cDevice, cRenderPass, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetRenderAreaGranularity function as declared in vulkan/vulkan.h:2795
func GetRenderAreaGranularity(Device []Device, RenderPass []RenderPass, PGranularity []Extent2D) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cRenderPass, _ := (*C.VkRenderPass)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&RenderPass)).Data)), cgoAllocsUnknown
	cPGranularity, _ := unpackArgSExtent2D(PGranularity)
	C.vkGetRenderAreaGranularity(cDevice, cRenderPass, cPGranularity)
	packSExtent2D(PGranularity, cPGranularity)
}

// CreateCommandPool function as declared in vulkan/vulkan.h:2800
func CreateCommandPool(Device []Device, PCreateInfo []CommandPoolCreateInfo, PAllocator []AllocationCallbacks, PCommandPool [][]CommandPool) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSCommandPoolCreateInfo(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPCommandPool, _ := unpackArgSSCommandPool(PCommandPool)
	__ret := C.vkCreateCommandPool(cDevice, cPCreateInfo, cPAllocator, cPCommandPool)
	packSSCommandPool(PCommandPool, cPCommandPool)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSCommandPoolCreateInfo(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyCommandPool function as declared in vulkan/vulkan.h:2806
func DestroyCommandPool(Device []Device, CommandPool []CommandPool, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cCommandPool, _ := (*C.VkCommandPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandPool)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyCommandPool(cDevice, cCommandPool, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// ResetCommandPool function as declared in vulkan/vulkan.h:2811
func ResetCommandPool(Device []Device, CommandPool []CommandPool, Flags CommandPoolResetFlags) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cCommandPool, _ := (*C.VkCommandPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandPool)).Data)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandPoolResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetCommandPool(cDevice, cCommandPool, cFlags)
	__v := (Result)(__ret)
	return __v
}

// AllocateCommandBuffers function as declared in vulkan/vulkan.h:2816
func AllocateCommandBuffers(Device []Device, PAllocateInfo []CommandBufferAllocateInfo, PCommandBuffers [][]CommandBuffer) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPAllocateInfo, _ := unpackArgSCommandBufferAllocateInfo(PAllocateInfo)
	cPCommandBuffers, _ := unpackArgSSCommandBuffer(PCommandBuffers)
	__ret := C.vkAllocateCommandBuffers(cDevice, cPAllocateInfo, cPCommandBuffers)
	packSSCommandBuffer(PCommandBuffers, cPCommandBuffers)
	packSCommandBufferAllocateInfo(PAllocateInfo, cPAllocateInfo)
	__v := (Result)(__ret)
	return __v
}

// FreeCommandBuffers function as declared in vulkan/vulkan.h:2821
func FreeCommandBuffers(Device []Device, CommandPool []CommandPool, CommandBufferCount uint32, PCommandBuffers [][]CommandBuffer) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cCommandPool, _ := (*C.VkCommandPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandPool)).Data)), cgoAllocsUnknown
	cCommandBufferCount, _ := (C.uint32_t)(CommandBufferCount), cgoAllocsUnknown
	cPCommandBuffers, _ := unpackArgSSCommandBuffer(PCommandBuffers)
	C.vkFreeCommandBuffers(cDevice, cCommandPool, cCommandBufferCount, cPCommandBuffers)
	packSSCommandBuffer(PCommandBuffers, cPCommandBuffers)
}

// BeginCommandBuffer function as declared in vulkan/vulkan.h:2827
func BeginCommandBuffer(CommandBuffer []CommandBuffer, PBeginInfo []CommandBufferBeginInfo) Result {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cPBeginInfo, _ := unpackArgSCommandBufferBeginInfo(PBeginInfo)
	__ret := C.vkBeginCommandBuffer(cCommandBuffer, cPBeginInfo)
	packSCommandBufferBeginInfo(PBeginInfo, cPBeginInfo)
	__v := (Result)(__ret)
	return __v
}

// EndCommandBuffer function as declared in vulkan/vulkan.h:2831
func EndCommandBuffer(CommandBuffer []CommandBuffer) Result {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	__ret := C.vkEndCommandBuffer(cCommandBuffer)
	__v := (Result)(__ret)
	return __v
}

// ResetCommandBuffer function as declared in vulkan/vulkan.h:2834
func ResetCommandBuffer(CommandBuffer []CommandBuffer, Flags CommandBufferResetFlags) Result {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFlags, _ := (C.VkCommandBufferResetFlags)(Flags), cgoAllocsUnknown
	__ret := C.vkResetCommandBuffer(cCommandBuffer, cFlags)
	__v := (Result)(__ret)
	return __v
}

// CmdBindPipeline function as declared in vulkan/vulkan.h:2838
func CmdBindPipeline(CommandBuffer []CommandBuffer, PipelineBindPoint PipelineBindPoint, Pipeline []Pipeline) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cPipelineBindPoint, _ := (C.VkPipelineBindPoint)(PipelineBindPoint), cgoAllocsUnknown
	cPipeline, _ := (*C.VkPipeline)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Pipeline)).Data)), cgoAllocsUnknown
	C.vkCmdBindPipeline(cCommandBuffer, cPipelineBindPoint, cPipeline)
}

// CmdSetViewport function as declared in vulkan/vulkan.h:2843
func CmdSetViewport(CommandBuffer []CommandBuffer, FirstViewport uint32, ViewportCount uint32, PViewports []Viewport) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFirstViewport, _ := (C.uint32_t)(FirstViewport), cgoAllocsUnknown
	cViewportCount, _ := (C.uint32_t)(ViewportCount), cgoAllocsUnknown
	cPViewports, _ := unpackArgSViewport(PViewports)
	C.vkCmdSetViewport(cCommandBuffer, cFirstViewport, cViewportCount, cPViewports)
	packSViewport(PViewports, cPViewports)
}

// CmdSetScissor function as declared in vulkan/vulkan.h:2849
func CmdSetScissor(CommandBuffer []CommandBuffer, FirstScissor uint32, ScissorCount uint32, PScissors []Rect2D) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFirstScissor, _ := (C.uint32_t)(FirstScissor), cgoAllocsUnknown
	cScissorCount, _ := (C.uint32_t)(ScissorCount), cgoAllocsUnknown
	cPScissors, _ := unpackArgSRect2D(PScissors)
	C.vkCmdSetScissor(cCommandBuffer, cFirstScissor, cScissorCount, cPScissors)
	packSRect2D(PScissors, cPScissors)
}

// CmdSetLineWidth function as declared in vulkan/vulkan.h:2855
func CmdSetLineWidth(CommandBuffer []CommandBuffer, LineWidth float32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cLineWidth, _ := (C.float)(LineWidth), cgoAllocsUnknown
	C.vkCmdSetLineWidth(cCommandBuffer, cLineWidth)
}

// CmdSetDepthBias function as declared in vulkan/vulkan.h:2859
func CmdSetDepthBias(CommandBuffer []CommandBuffer, DepthBiasConstantFactor float32, DepthBiasClamp float32, DepthBiasSlopeFactor float32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cDepthBiasConstantFactor, _ := (C.float)(DepthBiasConstantFactor), cgoAllocsUnknown
	cDepthBiasClamp, _ := (C.float)(DepthBiasClamp), cgoAllocsUnknown
	cDepthBiasSlopeFactor, _ := (C.float)(DepthBiasSlopeFactor), cgoAllocsUnknown
	C.vkCmdSetDepthBias(cCommandBuffer, cDepthBiasConstantFactor, cDepthBiasClamp, cDepthBiasSlopeFactor)
}

// CmdSetBlendConstants function as declared in vulkan/vulkan.h:2865
func CmdSetBlendConstants(CommandBuffer []CommandBuffer, BlendConstants *[4]float32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cBlendConstants, _ := *(**[52][93]C.float)(unsafe.Pointer(&BlendConstants)), cgoAllocsUnknown
	C.vkCmdSetBlendConstants(cCommandBuffer, cBlendConstants)
}

// CmdSetDepthBounds function as declared in vulkan/vulkan.h:2869
func CmdSetDepthBounds(CommandBuffer []CommandBuffer, MinDepthBounds float32, MaxDepthBounds float32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cMinDepthBounds, _ := (C.float)(MinDepthBounds), cgoAllocsUnknown
	cMaxDepthBounds, _ := (C.float)(MaxDepthBounds), cgoAllocsUnknown
	C.vkCmdSetDepthBounds(cCommandBuffer, cMinDepthBounds, cMaxDepthBounds)
}

// CmdSetStencilCompareMask function as declared in vulkan/vulkan.h:2874
func CmdSetStencilCompareMask(CommandBuffer []CommandBuffer, FaceMask StencilFaceFlags, CompareMask uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cCompareMask, _ := (C.uint32_t)(CompareMask), cgoAllocsUnknown
	C.vkCmdSetStencilCompareMask(cCommandBuffer, cFaceMask, cCompareMask)
}

// CmdSetStencilWriteMask function as declared in vulkan/vulkan.h:2879
func CmdSetStencilWriteMask(CommandBuffer []CommandBuffer, FaceMask StencilFaceFlags, WriteMask uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cWriteMask, _ := (C.uint32_t)(WriteMask), cgoAllocsUnknown
	C.vkCmdSetStencilWriteMask(cCommandBuffer, cFaceMask, cWriteMask)
}

// CmdSetStencilReference function as declared in vulkan/vulkan.h:2884
func CmdSetStencilReference(CommandBuffer []CommandBuffer, FaceMask StencilFaceFlags, Reference uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFaceMask, _ := (C.VkStencilFaceFlags)(FaceMask), cgoAllocsUnknown
	cReference, _ := (C.uint32_t)(Reference), cgoAllocsUnknown
	C.vkCmdSetStencilReference(cCommandBuffer, cFaceMask, cReference)
}

// CmdBindDescriptorSets function as declared in vulkan/vulkan.h:2889
func CmdBindDescriptorSets(CommandBuffer []CommandBuffer, PipelineBindPoint PipelineBindPoint, Layout []PipelineLayout, FirstSet uint32, DescriptorSetCount uint32, PDescriptorSets [][]DescriptorSet, DynamicOffsetCount uint32, PDynamicOffsets []uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cPipelineBindPoint, _ := (C.VkPipelineBindPoint)(PipelineBindPoint), cgoAllocsUnknown
	cLayout, _ := (*C.VkPipelineLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Layout)).Data)), cgoAllocsUnknown
	cFirstSet, _ := (C.uint32_t)(FirstSet), cgoAllocsUnknown
	cDescriptorSetCount, _ := (C.uint32_t)(DescriptorSetCount), cgoAllocsUnknown
	cPDescriptorSets, _ := unpackArgSSDescriptorSet(PDescriptorSets)
	cDynamicOffsetCount, _ := (C.uint32_t)(DynamicOffsetCount), cgoAllocsUnknown
	cPDynamicOffsets, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDynamicOffsets)).Data)), cgoAllocsUnknown
	C.vkCmdBindDescriptorSets(cCommandBuffer, cPipelineBindPoint, cLayout, cFirstSet, cDescriptorSetCount, cPDescriptorSets, cDynamicOffsetCount, cPDynamicOffsets)
	packSSDescriptorSet(PDescriptorSets, cPDescriptorSets)
}

// CmdBindIndexBuffer function as declared in vulkan/vulkan.h:2899
func CmdBindIndexBuffer(CommandBuffer []CommandBuffer, Buffer []Buffer, Offset DeviceSize, IndexType IndexType) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cIndexType, _ := (C.VkIndexType)(IndexType), cgoAllocsUnknown
	C.vkCmdBindIndexBuffer(cCommandBuffer, cBuffer, cOffset, cIndexType)
}

// CmdBindVertexBuffers function as declared in vulkan/vulkan.h:2905
func CmdBindVertexBuffers(CommandBuffer []CommandBuffer, FirstBinding uint32, BindingCount uint32, PBuffers [][]Buffer, POffsets []DeviceSize) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cFirstBinding, _ := (C.uint32_t)(FirstBinding), cgoAllocsUnknown
	cBindingCount, _ := (C.uint32_t)(BindingCount), cgoAllocsUnknown
	cPBuffers, _ := unpackArgSSBuffer(PBuffers)
	cPOffsets, _ := (*C.VkDeviceSize)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&POffsets)).Data)), cgoAllocsUnknown
	C.vkCmdBindVertexBuffers(cCommandBuffer, cFirstBinding, cBindingCount, cPBuffers, cPOffsets)
	packSSBuffer(PBuffers, cPBuffers)
}

// CmdDraw function as declared in vulkan/vulkan.h:2912
func CmdDraw(CommandBuffer []CommandBuffer, VertexCount uint32, InstanceCount uint32, FirstVertex uint32, FirstInstance uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cVertexCount, _ := (C.uint32_t)(VertexCount), cgoAllocsUnknown
	cInstanceCount, _ := (C.uint32_t)(InstanceCount), cgoAllocsUnknown
	cFirstVertex, _ := (C.uint32_t)(FirstVertex), cgoAllocsUnknown
	cFirstInstance, _ := (C.uint32_t)(FirstInstance), cgoAllocsUnknown
	C.vkCmdDraw(cCommandBuffer, cVertexCount, cInstanceCount, cFirstVertex, cFirstInstance)
}

// CmdDrawIndexed function as declared in vulkan/vulkan.h:2919
func CmdDrawIndexed(CommandBuffer []CommandBuffer, IndexCount uint32, InstanceCount uint32, FirstIndex uint32, VertexOffset int32, FirstInstance uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cIndexCount, _ := (C.uint32_t)(IndexCount), cgoAllocsUnknown
	cInstanceCount, _ := (C.uint32_t)(InstanceCount), cgoAllocsUnknown
	cFirstIndex, _ := (C.uint32_t)(FirstIndex), cgoAllocsUnknown
	cVertexOffset, _ := (C.int32_t)(VertexOffset), cgoAllocsUnknown
	cFirstInstance, _ := (C.uint32_t)(FirstInstance), cgoAllocsUnknown
	C.vkCmdDrawIndexed(cCommandBuffer, cIndexCount, cInstanceCount, cFirstIndex, cVertexOffset, cFirstInstance)
}

// CmdDrawIndirect function as declared in vulkan/vulkan.h:2927
func CmdDrawIndirect(CommandBuffer []CommandBuffer, Buffer []Buffer, Offset DeviceSize, DrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cDrawCount, _ := (C.uint32_t)(DrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndirect(cCommandBuffer, cBuffer, cOffset, cDrawCount, cStride)
}

// CmdDrawIndexedIndirect function as declared in vulkan/vulkan.h:2934
func CmdDrawIndexedIndirect(CommandBuffer []CommandBuffer, Buffer []Buffer, Offset DeviceSize, DrawCount uint32, Stride uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	cDrawCount, _ := (C.uint32_t)(DrawCount), cgoAllocsUnknown
	cStride, _ := (C.uint32_t)(Stride), cgoAllocsUnknown
	C.vkCmdDrawIndexedIndirect(cCommandBuffer, cBuffer, cOffset, cDrawCount, cStride)
}

// CmdDispatch function as declared in vulkan/vulkan.h:2941
func CmdDispatch(CommandBuffer []CommandBuffer, X uint32, Y uint32, Z uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cX, _ := (C.uint32_t)(X), cgoAllocsUnknown
	cY, _ := (C.uint32_t)(Y), cgoAllocsUnknown
	cZ, _ := (C.uint32_t)(Z), cgoAllocsUnknown
	C.vkCmdDispatch(cCommandBuffer, cX, cY, cZ)
}

// CmdDispatchIndirect function as declared in vulkan/vulkan.h:2947
func CmdDispatchIndirect(CommandBuffer []CommandBuffer, Buffer []Buffer, Offset DeviceSize) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Buffer)).Data)), cgoAllocsUnknown
	cOffset, _ := (C.VkDeviceSize)(Offset), cgoAllocsUnknown
	C.vkCmdDispatchIndirect(cCommandBuffer, cBuffer, cOffset)
}

// CmdCopyBuffer function as declared in vulkan/vulkan.h:2952
func CmdCopyBuffer(CommandBuffer []CommandBuffer, SrcBuffer []Buffer, DstBuffer []Buffer, RegionCount uint32, PRegions []BufferCopy) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcBuffer)).Data)), cgoAllocsUnknown
	cDstBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstBuffer)).Data)), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferCopy(PRegions)
	C.vkCmdCopyBuffer(cCommandBuffer, cSrcBuffer, cDstBuffer, cRegionCount, cPRegions)
	packSBufferCopy(PRegions, cPRegions)
}

// CmdCopyImage function as declared in vulkan/vulkan.h:2959
func CmdCopyImage(CommandBuffer []CommandBuffer, SrcImage []Image, SrcImageLayout ImageLayout, DstImage []Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageCopy) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcImage)).Data)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstImage)).Data)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageCopy(PRegions)
	C.vkCmdCopyImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSImageCopy(PRegions, cPRegions)
}

// CmdBlitImage function as declared in vulkan/vulkan.h:2968
func CmdBlitImage(CommandBuffer []CommandBuffer, SrcImage []Image, SrcImageLayout ImageLayout, DstImage []Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageBlit, Filter Filter) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcImage)).Data)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstImage)).Data)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageBlit(PRegions)
	cFilter, _ := (C.VkFilter)(Filter), cgoAllocsUnknown
	C.vkCmdBlitImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions, cFilter)
	packSImageBlit(PRegions, cPRegions)
}

// CmdCopyBufferToImage function as declared in vulkan/vulkan.h:2978
func CmdCopyBufferToImage(CommandBuffer []CommandBuffer, SrcBuffer []Buffer, DstImage []Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []BufferImageCopy) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcBuffer)).Data)), cgoAllocsUnknown
	cDstImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstImage)).Data)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferImageCopy(PRegions)
	C.vkCmdCopyBufferToImage(cCommandBuffer, cSrcBuffer, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSBufferImageCopy(PRegions, cPRegions)
}

// CmdCopyImageToBuffer function as declared in vulkan/vulkan.h:2986
func CmdCopyImageToBuffer(CommandBuffer []CommandBuffer, SrcImage []Image, SrcImageLayout ImageLayout, DstBuffer []Buffer, RegionCount uint32, PRegions []BufferImageCopy) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcImage)).Data)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstBuffer)).Data)), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSBufferImageCopy(PRegions)
	C.vkCmdCopyImageToBuffer(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstBuffer, cRegionCount, cPRegions)
	packSBufferImageCopy(PRegions, cPRegions)
}

// CmdUpdateBuffer function as declared in vulkan/vulkan.h:2994
func CmdUpdateBuffer(CommandBuffer []CommandBuffer, DstBuffer []Buffer, DstOffset DeviceSize, DataSize DeviceSize, PData []uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cDstBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstBuffer)).Data)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cDataSize, _ := (C.VkDeviceSize)(DataSize), cgoAllocsUnknown
	cPData, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PData)).Data)), cgoAllocsUnknown
	C.vkCmdUpdateBuffer(cCommandBuffer, cDstBuffer, cDstOffset, cDataSize, cPData)
}

// CmdFillBuffer function as declared in vulkan/vulkan.h:3001
func CmdFillBuffer(CommandBuffer []CommandBuffer, DstBuffer []Buffer, DstOffset DeviceSize, Size DeviceSize, Data uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cDstBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstBuffer)).Data)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cSize, _ := (C.VkDeviceSize)(Size), cgoAllocsUnknown
	cData, _ := (C.uint32_t)(Data), cgoAllocsUnknown
	C.vkCmdFillBuffer(cCommandBuffer, cDstBuffer, cDstOffset, cSize, cData)
}

// CmdClearColorImage function as declared in vulkan/vulkan.h:3008
func CmdClearColorImage(CommandBuffer []CommandBuffer, Image []Image, ImageLayout ImageLayout, PColor [16]ClearColorValue, RangeCount uint32, PRanges []ImageSubresourceRange) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cImageLayout, _ := (C.VkImageLayout)(ImageLayout), cgoAllocsUnknown
	cPColor, _ := PColor.PassRef()
	cRangeCount, _ := (C.uint32_t)(RangeCount), cgoAllocsUnknown
	cPRanges, _ := unpackArgSImageSubresourceRange(PRanges)
	C.vkCmdClearColorImage(cCommandBuffer, cImage, cImageLayout, cPColor, cRangeCount, cPRanges)
	packSImageSubresourceRange(PRanges, cPRanges)
}

// CmdClearDepthStencilImage function as declared in vulkan/vulkan.h:3016
func CmdClearDepthStencilImage(CommandBuffer []CommandBuffer, Image []Image, ImageLayout ImageLayout, PDepthStencil []ClearDepthStencilValue, RangeCount uint32, PRanges []ImageSubresourceRange) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Image)).Data)), cgoAllocsUnknown
	cImageLayout, _ := (C.VkImageLayout)(ImageLayout), cgoAllocsUnknown
	cPDepthStencil, _ := unpackArgSClearDepthStencilValue(PDepthStencil)
	cRangeCount, _ := (C.uint32_t)(RangeCount), cgoAllocsUnknown
	cPRanges, _ := unpackArgSImageSubresourceRange(PRanges)
	C.vkCmdClearDepthStencilImage(cCommandBuffer, cImage, cImageLayout, cPDepthStencil, cRangeCount, cPRanges)
	packSImageSubresourceRange(PRanges, cPRanges)
	packSClearDepthStencilValue(PDepthStencil, cPDepthStencil)
}

// CmdClearAttachments function as declared in vulkan/vulkan.h:3024
func CmdClearAttachments(CommandBuffer []CommandBuffer, AttachmentCount uint32, PAttachments []ClearAttachment, RectCount uint32, PRects []ClearRect) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cAttachmentCount, _ := (C.uint32_t)(AttachmentCount), cgoAllocsUnknown
	cPAttachments, _ := unpackArgSClearAttachment(PAttachments)
	cRectCount, _ := (C.uint32_t)(RectCount), cgoAllocsUnknown
	cPRects, _ := unpackArgSClearRect(PRects)
	C.vkCmdClearAttachments(cCommandBuffer, cAttachmentCount, cPAttachments, cRectCount, cPRects)
	packSClearRect(PRects, cPRects)
	packSClearAttachment(PAttachments, cPAttachments)
}

// CmdResolveImage function as declared in vulkan/vulkan.h:3031
func CmdResolveImage(CommandBuffer []CommandBuffer, SrcImage []Image, SrcImageLayout ImageLayout, DstImage []Image, DstImageLayout ImageLayout, RegionCount uint32, PRegions []ImageResolve) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&SrcImage)).Data)), cgoAllocsUnknown
	cSrcImageLayout, _ := (C.VkImageLayout)(SrcImageLayout), cgoAllocsUnknown
	cDstImage, _ := (*C.VkImage)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstImage)).Data)), cgoAllocsUnknown
	cDstImageLayout, _ := (C.VkImageLayout)(DstImageLayout), cgoAllocsUnknown
	cRegionCount, _ := (C.uint32_t)(RegionCount), cgoAllocsUnknown
	cPRegions, _ := unpackArgSImageResolve(PRegions)
	C.vkCmdResolveImage(cCommandBuffer, cSrcImage, cSrcImageLayout, cDstImage, cDstImageLayout, cRegionCount, cPRegions)
	packSImageResolve(PRegions, cPRegions)
}

// CmdSetEvent function as declared in vulkan/vulkan.h:3040
func CmdSetEvent(CommandBuffer []CommandBuffer, Event []Event, StageMask PipelineStageFlags) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	cStageMask, _ := (C.VkPipelineStageFlags)(StageMask), cgoAllocsUnknown
	C.vkCmdSetEvent(cCommandBuffer, cEvent, cStageMask)
}

// CmdResetEvent function as declared in vulkan/vulkan.h:3045
func CmdResetEvent(CommandBuffer []CommandBuffer, Event []Event, StageMask PipelineStageFlags) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cEvent, _ := (*C.VkEvent)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Event)).Data)), cgoAllocsUnknown
	cStageMask, _ := (C.VkPipelineStageFlags)(StageMask), cgoAllocsUnknown
	C.vkCmdResetEvent(cCommandBuffer, cEvent, cStageMask)
}

// CmdWaitEvents function as declared in vulkan/vulkan.h:3050
func CmdWaitEvents(CommandBuffer []CommandBuffer, EventCount uint32, PEvents [][]Event, SrcStageMask PipelineStageFlags, DstStageMask PipelineStageFlags, MemoryBarrierCount uint32, PMemoryBarriers []MemoryBarrier, BufferMemoryBarrierCount uint32, PBufferMemoryBarriers []BufferMemoryBarrier, ImageMemoryBarrierCount uint32, PImageMemoryBarriers []ImageMemoryBarrier) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cEventCount, _ := (C.uint32_t)(EventCount), cgoAllocsUnknown
	cPEvents, _ := unpackArgSSEvent(PEvents)
	cSrcStageMask, _ := (C.VkPipelineStageFlags)(SrcStageMask), cgoAllocsUnknown
	cDstStageMask, _ := (C.VkPipelineStageFlags)(DstStageMask), cgoAllocsUnknown
	cMemoryBarrierCount, _ := (C.uint32_t)(MemoryBarrierCount), cgoAllocsUnknown
	cPMemoryBarriers, _ := unpackArgSMemoryBarrier(PMemoryBarriers)
	cBufferMemoryBarrierCount, _ := (C.uint32_t)(BufferMemoryBarrierCount), cgoAllocsUnknown
	cPBufferMemoryBarriers, _ := unpackArgSBufferMemoryBarrier(PBufferMemoryBarriers)
	cImageMemoryBarrierCount, _ := (C.uint32_t)(ImageMemoryBarrierCount), cgoAllocsUnknown
	cPImageMemoryBarriers, _ := unpackArgSImageMemoryBarrier(PImageMemoryBarriers)
	C.vkCmdWaitEvents(cCommandBuffer, cEventCount, cPEvents, cSrcStageMask, cDstStageMask, cMemoryBarrierCount, cPMemoryBarriers, cBufferMemoryBarrierCount, cPBufferMemoryBarriers, cImageMemoryBarrierCount, cPImageMemoryBarriers)
	packSImageMemoryBarrier(PImageMemoryBarriers, cPImageMemoryBarriers)
	packSBufferMemoryBarrier(PBufferMemoryBarriers, cPBufferMemoryBarriers)
	packSMemoryBarrier(PMemoryBarriers, cPMemoryBarriers)
	packSSEvent(PEvents, cPEvents)
}

// CmdPipelineBarrier function as declared in vulkan/vulkan.h:3063
func CmdPipelineBarrier(CommandBuffer []CommandBuffer, SrcStageMask PipelineStageFlags, DstStageMask PipelineStageFlags, DependencyFlags DependencyFlags, MemoryBarrierCount uint32, PMemoryBarriers []MemoryBarrier, BufferMemoryBarrierCount uint32, PBufferMemoryBarriers []BufferMemoryBarrier, ImageMemoryBarrierCount uint32, PImageMemoryBarriers []ImageMemoryBarrier) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cSrcStageMask, _ := (C.VkPipelineStageFlags)(SrcStageMask), cgoAllocsUnknown
	cDstStageMask, _ := (C.VkPipelineStageFlags)(DstStageMask), cgoAllocsUnknown
	cDependencyFlags, _ := (C.VkDependencyFlags)(DependencyFlags), cgoAllocsUnknown
	cMemoryBarrierCount, _ := (C.uint32_t)(MemoryBarrierCount), cgoAllocsUnknown
	cPMemoryBarriers, _ := unpackArgSMemoryBarrier(PMemoryBarriers)
	cBufferMemoryBarrierCount, _ := (C.uint32_t)(BufferMemoryBarrierCount), cgoAllocsUnknown
	cPBufferMemoryBarriers, _ := unpackArgSBufferMemoryBarrier(PBufferMemoryBarriers)
	cImageMemoryBarrierCount, _ := (C.uint32_t)(ImageMemoryBarrierCount), cgoAllocsUnknown
	cPImageMemoryBarriers, _ := unpackArgSImageMemoryBarrier(PImageMemoryBarriers)
	C.vkCmdPipelineBarrier(cCommandBuffer, cSrcStageMask, cDstStageMask, cDependencyFlags, cMemoryBarrierCount, cPMemoryBarriers, cBufferMemoryBarrierCount, cPBufferMemoryBarriers, cImageMemoryBarrierCount, cPImageMemoryBarriers)
	packSImageMemoryBarrier(PImageMemoryBarriers, cPImageMemoryBarriers)
	packSBufferMemoryBarrier(PBufferMemoryBarriers, cPBufferMemoryBarriers)
	packSMemoryBarrier(PMemoryBarriers, cPMemoryBarriers)
}

// CmdBeginQuery function as declared in vulkan/vulkan.h:3075
func CmdBeginQuery(CommandBuffer []CommandBuffer, QueryPool []QueryPool, Query uint32, Flags QueryControlFlags) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryControlFlags)(Flags), cgoAllocsUnknown
	C.vkCmdBeginQuery(cCommandBuffer, cQueryPool, cQuery, cFlags)
}

// CmdEndQuery function as declared in vulkan/vulkan.h:3081
func CmdEndQuery(CommandBuffer []CommandBuffer, QueryPool []QueryPool, Query uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	C.vkCmdEndQuery(cCommandBuffer, cQueryPool, cQuery)
}

// CmdResetQueryPool function as declared in vulkan/vulkan.h:3086
func CmdResetQueryPool(CommandBuffer []CommandBuffer, QueryPool []QueryPool, FirstQuery uint32, QueryCount uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	C.vkCmdResetQueryPool(cCommandBuffer, cQueryPool, cFirstQuery, cQueryCount)
}

// CmdWriteTimestamp function as declared in vulkan/vulkan.h:3092
func CmdWriteTimestamp(CommandBuffer []CommandBuffer, PipelineStage PipelineStageFlagBits, QueryPool []QueryPool, Query uint32) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cPipelineStage, _ := (C.VkPipelineStageFlagBits)(PipelineStage), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cQuery, _ := (C.uint32_t)(Query), cgoAllocsUnknown
	C.vkCmdWriteTimestamp(cCommandBuffer, cPipelineStage, cQueryPool, cQuery)
}

// CmdCopyQueryPoolResults function as declared in vulkan/vulkan.h:3098
func CmdCopyQueryPoolResults(CommandBuffer []CommandBuffer, QueryPool []QueryPool, FirstQuery uint32, QueryCount uint32, DstBuffer []Buffer, DstOffset DeviceSize, Stride DeviceSize, Flags QueryResultFlags) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cQueryPool, _ := (*C.VkQueryPool)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&QueryPool)).Data)), cgoAllocsUnknown
	cFirstQuery, _ := (C.uint32_t)(FirstQuery), cgoAllocsUnknown
	cQueryCount, _ := (C.uint32_t)(QueryCount), cgoAllocsUnknown
	cDstBuffer, _ := (*C.VkBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&DstBuffer)).Data)), cgoAllocsUnknown
	cDstOffset, _ := (C.VkDeviceSize)(DstOffset), cgoAllocsUnknown
	cStride, _ := (C.VkDeviceSize)(Stride), cgoAllocsUnknown
	cFlags, _ := (C.VkQueryResultFlags)(Flags), cgoAllocsUnknown
	C.vkCmdCopyQueryPoolResults(cCommandBuffer, cQueryPool, cFirstQuery, cQueryCount, cDstBuffer, cDstOffset, cStride, cFlags)
}

// CmdPushConstants function as declared in vulkan/vulkan.h:3108
func CmdPushConstants(CommandBuffer []CommandBuffer, Layout []PipelineLayout, StageFlags ShaderStageFlags, Offset uint32, Size uint32, PValues unsafe.Pointer) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cLayout, _ := (*C.VkPipelineLayout)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Layout)).Data)), cgoAllocsUnknown
	cStageFlags, _ := (C.VkShaderStageFlags)(StageFlags), cgoAllocsUnknown
	cOffset, _ := (C.uint32_t)(Offset), cgoAllocsUnknown
	cSize, _ := (C.uint32_t)(Size), cgoAllocsUnknown
	cPValues, _ := (unsafe.Pointer)(unsafe.Pointer(PValues)), cgoAllocsUnknown
	C.vkCmdPushConstants(cCommandBuffer, cLayout, cStageFlags, cOffset, cSize, cPValues)
}

// CmdBeginRenderPass function as declared in vulkan/vulkan.h:3116
func CmdBeginRenderPass(CommandBuffer []CommandBuffer, PRenderPassBegin []RenderPassBeginInfo, Contents SubpassContents) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cPRenderPassBegin, _ := unpackArgSRenderPassBeginInfo(PRenderPassBegin)
	cContents, _ := (C.VkSubpassContents)(Contents), cgoAllocsUnknown
	C.vkCmdBeginRenderPass(cCommandBuffer, cPRenderPassBegin, cContents)
	packSRenderPassBeginInfo(PRenderPassBegin, cPRenderPassBegin)
}

// CmdNextSubpass function as declared in vulkan/vulkan.h:3121
func CmdNextSubpass(CommandBuffer []CommandBuffer, Contents SubpassContents) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cContents, _ := (C.VkSubpassContents)(Contents), cgoAllocsUnknown
	C.vkCmdNextSubpass(cCommandBuffer, cContents)
}

// CmdEndRenderPass function as declared in vulkan/vulkan.h:3125
func CmdEndRenderPass(CommandBuffer []CommandBuffer) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	C.vkCmdEndRenderPass(cCommandBuffer)
}

// CmdExecuteCommands function as declared in vulkan/vulkan.h:3128
func CmdExecuteCommands(CommandBuffer []CommandBuffer, CommandBufferCount uint32, PCommandBuffers [][]CommandBuffer) {
	cCommandBuffer, _ := (*C.VkCommandBuffer)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&CommandBuffer)).Data)), cgoAllocsUnknown
	cCommandBufferCount, _ := (C.uint32_t)(CommandBufferCount), cgoAllocsUnknown
	cPCommandBuffers, _ := unpackArgSSCommandBuffer(PCommandBuffers)
	C.vkCmdExecuteCommands(cCommandBuffer, cCommandBufferCount, cPCommandBuffers)
	packSSCommandBuffer(PCommandBuffers, cPCommandBuffers)
}

// DestroySurfaceKHR function as declared in vulkan/vulkan.h:3208
func DestroySurfaceKHR(Instance []Instance, Surface []SurfaceKHR, PAllocator []AllocationCallbacks) {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Surface)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySurfaceKHR(cInstance, cSurface, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetPhysicalDeviceSurfaceSupportKHR function as declared in vulkan/vulkan.h:3213
func GetPhysicalDeviceSurfaceSupportKHR(PhysicalDevice []PhysicalDevice, QueueFamilyIndex uint32, Surface []SurfaceKHR, PSupported []Bool32) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cQueueFamilyIndex, _ := (C.uint32_t)(QueueFamilyIndex), cgoAllocsUnknown
	cSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Surface)).Data)), cgoAllocsUnknown
	cPSupported, _ := (*C.VkBool32)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSupported)).Data)), cgoAllocsUnknown
	__ret := C.vkGetPhysicalDeviceSurfaceSupportKHR(cPhysicalDevice, cQueueFamilyIndex, cSurface, cPSupported)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceCapabilitiesKHR function as declared in vulkan/vulkan.h:3219
func GetPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice []PhysicalDevice, Surface []SurfaceKHR, PSurfaceCapabilities []SurfaceCapabilitiesKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Surface)).Data)), cgoAllocsUnknown
	cPSurfaceCapabilities, _ := unpackArgSSurfaceCapabilitiesKHR(PSurfaceCapabilities)
	__ret := C.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(cPhysicalDevice, cSurface, cPSurfaceCapabilities)
	packSSurfaceCapabilitiesKHR(PSurfaceCapabilities, cPSurfaceCapabilities)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfaceFormatsKHR function as declared in vulkan/vulkan.h:3224
func GetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice []PhysicalDevice, Surface []SurfaceKHR, PSurfaceFormatCount []uint32, PSurfaceFormats []SurfaceFormatKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Surface)).Data)), cgoAllocsUnknown
	cPSurfaceFormatCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSurfaceFormatCount)).Data)), cgoAllocsUnknown
	cPSurfaceFormats, _ := unpackArgSSurfaceFormatKHR(PSurfaceFormats)
	__ret := C.vkGetPhysicalDeviceSurfaceFormatsKHR(cPhysicalDevice, cSurface, cPSurfaceFormatCount, cPSurfaceFormats)
	packSSurfaceFormatKHR(PSurfaceFormats, cPSurfaceFormats)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceSurfacePresentModesKHR function as declared in vulkan/vulkan.h:3230
func GetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice []PhysicalDevice, Surface []SurfaceKHR, PPresentModeCount []uint32, PPresentModes []PresentModeKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cSurface, _ := (*C.VkSurfaceKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Surface)).Data)), cgoAllocsUnknown
	cPPresentModeCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPresentModeCount)).Data)), cgoAllocsUnknown
	cPPresentModes, _ := (*C.VkPresentModeKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPresentModes)).Data)), cgoAllocsUnknown
	__ret := C.vkGetPhysicalDeviceSurfacePresentModesKHR(cPhysicalDevice, cSurface, cPPresentModeCount, cPPresentModes)
	__v := (Result)(__ret)
	return __v
}

// CreateSwapchainKHR function as declared in vulkan/vulkan.h:3285
func CreateSwapchainKHR(Device []Device, PCreateInfo []SwapchainCreateInfoKHR, PAllocator []AllocationCallbacks, PSwapchain [][]SwapchainKHR) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSSwapchainCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSwapchain, _ := unpackArgSSSwapchainKHR(PSwapchain)
	__ret := C.vkCreateSwapchainKHR(cDevice, cPCreateInfo, cPAllocator, cPSwapchain)
	packSSSwapchainKHR(PSwapchain, cPSwapchain)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSwapchainCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroySwapchainKHR function as declared in vulkan/vulkan.h:3291
func DestroySwapchainKHR(Device []Device, Swapchain []SwapchainKHR, PAllocator []AllocationCallbacks) {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSwapchain, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Swapchain)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroySwapchainKHR(cDevice, cSwapchain, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// GetSwapchainImagesKHR function as declared in vulkan/vulkan.h:3296
func GetSwapchainImagesKHR(Device []Device, Swapchain []SwapchainKHR, PSwapchainImageCount []uint32, PSwapchainImages [][]Image) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSwapchain, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Swapchain)).Data)), cgoAllocsUnknown
	cPSwapchainImageCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PSwapchainImageCount)).Data)), cgoAllocsUnknown
	cPSwapchainImages, _ := unpackArgSSImage(PSwapchainImages)
	__ret := C.vkGetSwapchainImagesKHR(cDevice, cSwapchain, cPSwapchainImageCount, cPSwapchainImages)
	packSSImage(PSwapchainImages, cPSwapchainImages)
	__v := (Result)(__ret)
	return __v
}

// AcquireNextImageKHR function as declared in vulkan/vulkan.h:3302
func AcquireNextImageKHR(Device []Device, Swapchain []SwapchainKHR, Timeout uint64, Semaphore []Semaphore, Fence []Fence, PImageIndex []uint32) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSwapchain, _ := (*C.VkSwapchainKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Swapchain)).Data)), cgoAllocsUnknown
	cTimeout, _ := (C.uint64_t)(Timeout), cgoAllocsUnknown
	cSemaphore, _ := (*C.VkSemaphore)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Semaphore)).Data)), cgoAllocsUnknown
	cFence, _ := (*C.VkFence)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Fence)).Data)), cgoAllocsUnknown
	cPImageIndex, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PImageIndex)).Data)), cgoAllocsUnknown
	__ret := C.vkAcquireNextImageKHR(cDevice, cSwapchain, cTimeout, cSemaphore, cFence, cPImageIndex)
	__v := (Result)(__ret)
	return __v
}

// QueuePresentKHR function as declared in vulkan/vulkan.h:3310
func QueuePresentKHR(Queue []Queue, PPresentInfo []PresentInfoKHR) Result {
	cQueue, _ := (*C.VkQueue)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Queue)).Data)), cgoAllocsUnknown
	cPPresentInfo, _ := unpackArgSPresentInfoKHR(PPresentInfo)
	__ret := C.vkQueuePresentKHR(cQueue, cPPresentInfo)
	packSPresentInfoKHR(PPresentInfo, cPPresentInfo)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPropertiesKHR function as declared in vulkan/vulkan.h:3400
func GetPhysicalDeviceDisplayPropertiesKHR(PhysicalDevice []PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayPropertiesKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayPropertiesKHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayPropertiesKHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayPropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetPhysicalDeviceDisplayPlanePropertiesKHR function as declared in vulkan/vulkan.h:3405
func GetPhysicalDeviceDisplayPlanePropertiesKHR(PhysicalDevice []PhysicalDevice, PPropertyCount []uint32, PProperties []DisplayPlanePropertiesKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayPlanePropertiesKHR(PProperties)
	__ret := C.vkGetPhysicalDeviceDisplayPlanePropertiesKHR(cPhysicalDevice, cPPropertyCount, cPProperties)
	packSDisplayPlanePropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneSupportedDisplaysKHR function as declared in vulkan/vulkan.h:3410
func GetDisplayPlaneSupportedDisplaysKHR(PhysicalDevice []PhysicalDevice, PlaneIndex uint32, PDisplayCount []uint32, PDisplays [][]DisplayKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cPlaneIndex, _ := (C.uint32_t)(PlaneIndex), cgoAllocsUnknown
	cPDisplayCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PDisplayCount)).Data)), cgoAllocsUnknown
	cPDisplays, _ := unpackArgSSDisplayKHR(PDisplays)
	__ret := C.vkGetDisplayPlaneSupportedDisplaysKHR(cPhysicalDevice, cPlaneIndex, cPDisplayCount, cPDisplays)
	packSSDisplayKHR(PDisplays, cPDisplays)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayModePropertiesKHR function as declared in vulkan/vulkan.h:3416
func GetDisplayModePropertiesKHR(PhysicalDevice []PhysicalDevice, Display []DisplayKHR, PPropertyCount []uint32, PProperties []DisplayModePropertiesKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cDisplay, _ := (*C.VkDisplayKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Display)).Data)), cgoAllocsUnknown
	cPPropertyCount, _ := (*C.uint32_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PPropertyCount)).Data)), cgoAllocsUnknown
	cPProperties, _ := unpackArgSDisplayModePropertiesKHR(PProperties)
	__ret := C.vkGetDisplayModePropertiesKHR(cPhysicalDevice, cDisplay, cPPropertyCount, cPProperties)
	packSDisplayModePropertiesKHR(PProperties, cPProperties)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayModeKHR function as declared in vulkan/vulkan.h:3422
func CreateDisplayModeKHR(PhysicalDevice []PhysicalDevice, Display []DisplayKHR, PCreateInfo []DisplayModeCreateInfoKHR, PAllocator []AllocationCallbacks, PMode [][]DisplayModeKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cDisplay, _ := (*C.VkDisplayKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Display)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDisplayModeCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPMode, _ := unpackArgSSDisplayModeKHR(PMode)
	__ret := C.vkCreateDisplayModeKHR(cPhysicalDevice, cDisplay, cPCreateInfo, cPAllocator, cPMode)
	packSSDisplayModeKHR(PMode, cPMode)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDisplayModeCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// GetDisplayPlaneCapabilitiesKHR function as declared in vulkan/vulkan.h:3429
func GetDisplayPlaneCapabilitiesKHR(PhysicalDevice []PhysicalDevice, Mode []DisplayModeKHR, PlaneIndex uint32, PCapabilities []DisplayPlaneCapabilitiesKHR) Result {
	cPhysicalDevice, _ := (*C.VkPhysicalDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&PhysicalDevice)).Data)), cgoAllocsUnknown
	cMode, _ := (*C.VkDisplayModeKHR)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Mode)).Data)), cgoAllocsUnknown
	cPlaneIndex, _ := (C.uint32_t)(PlaneIndex), cgoAllocsUnknown
	cPCapabilities, _ := unpackArgSDisplayPlaneCapabilitiesKHR(PCapabilities)
	__ret := C.vkGetDisplayPlaneCapabilitiesKHR(cPhysicalDevice, cMode, cPlaneIndex, cPCapabilities)
	packSDisplayPlaneCapabilitiesKHR(PCapabilities, cPCapabilities)
	__v := (Result)(__ret)
	return __v
}

// CreateDisplayPlaneSurfaceKHR function as declared in vulkan/vulkan.h:3435
func CreateDisplayPlaneSurfaceKHR(Instance []Instance, PCreateInfo []DisplaySurfaceCreateInfoKHR, PAllocator []AllocationCallbacks, PSurface [][]SurfaceKHR) Result {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDisplaySurfaceCreateInfoKHR(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSurface, _ := unpackArgSSSurfaceKHR(PSurface)
	__ret := C.vkCreateDisplayPlaneSurfaceKHR(cInstance, cPCreateInfo, cPAllocator, cPSurface)
	packSSSurfaceKHR(PSurface, cPSurface)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDisplaySurfaceCreateInfoKHR(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// CreateSharedSwapchainsKHR function as declared in vulkan/vulkan.h:3458
func CreateSharedSwapchainsKHR(Device []Device, SwapchainCount uint32, PCreateInfos []SwapchainCreateInfoKHR, PAllocator []AllocationCallbacks, PSwapchains [][]SwapchainKHR) Result {
	cDevice, _ := (*C.VkDevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Device)).Data)), cgoAllocsUnknown
	cSwapchainCount, _ := (C.uint32_t)(SwapchainCount), cgoAllocsUnknown
	cPCreateInfos, _ := unpackArgSSwapchainCreateInfoKHR(PCreateInfos)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPSwapchains, _ := unpackArgSSSwapchainKHR(PSwapchains)
	__ret := C.vkCreateSharedSwapchainsKHR(cDevice, cSwapchainCount, cPCreateInfos, cPAllocator, cPSwapchains)
	packSSSwapchainKHR(PSwapchains, cPSwapchains)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSSwapchainCreateInfoKHR(PCreateInfos, cPCreateInfos)
	__v := (Result)(__ret)
	return __v
}

// CreateDebugReportCallbackEXT function as declared in vulkan/vulkan.h:3755
func CreateDebugReportCallbackEXT(Instance []Instance, PCreateInfo []DebugReportCallbackCreateInfoEXT, PAllocator []AllocationCallbacks, PCallback [][]DebugReportCallbackEXT) Result {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cPCreateInfo, _ := unpackArgSDebugReportCallbackCreateInfoEXT(PCreateInfo)
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	cPCallback, _ := unpackArgSSDebugReportCallbackEXT(PCallback)
	__ret := C.vkCreateDebugReportCallbackEXT(cInstance, cPCreateInfo, cPAllocator, cPCallback)
	packSSDebugReportCallbackEXT(PCallback, cPCallback)
	packSAllocationCallbacks(PAllocator, cPAllocator)
	packSDebugReportCallbackCreateInfoEXT(PCreateInfo, cPCreateInfo)
	__v := (Result)(__ret)
	return __v
}

// DestroyDebugReportCallbackEXT function as declared in vulkan/vulkan.h:3761
func DestroyDebugReportCallbackEXT(Instance []Instance, Callback []DebugReportCallbackEXT, PAllocator []AllocationCallbacks) {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cCallback, _ := (*C.VkDebugReportCallbackEXT)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Callback)).Data)), cgoAllocsUnknown
	cPAllocator, _ := unpackArgSAllocationCallbacks(PAllocator)
	C.vkDestroyDebugReportCallbackEXT(cInstance, cCallback, cPAllocator)
	packSAllocationCallbacks(PAllocator, cPAllocator)
}

// DebugReportMessageEXT function as declared in vulkan/vulkan.h:3766
func DebugReportMessageEXT(Instance []Instance, Flags DebugReportFlagsEXT, ObjectType DebugReportObjectTypeEXT, Object uint64, Location uint, MessageCode int32, PLayerPrefix string, PMessage string) {
	cInstance, _ := (*C.VkInstance)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&Instance)).Data)), cgoAllocsUnknown
	cFlags, _ := (C.VkDebugReportFlagsEXT)(Flags), cgoAllocsUnknown
	cObjectType, _ := (C.VkDebugReportObjectTypeEXT)(ObjectType), cgoAllocsUnknown
	cObject, _ := (C.uint64_t)(Object), cgoAllocsUnknown
	cLocation, _ := (C.size_t)(Location), cgoAllocsUnknown
	cMessageCode, _ := (C.int32_t)(MessageCode), cgoAllocsUnknown
	cPLayerPrefix, _ := unpackPCharString(PLayerPrefix)
	cPMessage, _ := unpackPCharString(PMessage)
	C.vkDebugReportMessageEXT(cInstance, cFlags, cObjectType, cObject, cLocation, cMessageCode, cPLayerPrefix, cPMessage)
}
